/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: api/rpc/rpc.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')
const proto = require('./rpc_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.RPCServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.RPCServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.DownloadRequest,
 *   !proto.ProcessResponse>}
 */
const methodDescriptor_RPCService_Exec = new grpc.web.MethodDescriptor(
  '/RPCService/Exec',
  grpc.web.MethodType.UNARY,
  proto.DownloadRequest,
  proto.ProcessResponse,
  /**
   * @param {!proto.DownloadRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ProcessResponse.deserializeBinary
);


/**
 * @param {!proto.DownloadRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ProcessResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ProcessResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RPCServiceClient.prototype.exec =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/RPCService/Exec',
      request,
      metadata || {},
      methodDescriptor_RPCService_Exec,
      callback);
};


/**
 * @param {!proto.DownloadRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ProcessResponse>}
 *     Promise that resolves to the response
 */
proto.RPCServicePromiseClient.prototype.exec =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/RPCService/Exec',
      request,
      metadata || {},
      methodDescriptor_RPCService_Exec);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.DownloadRequest,
 *   !proto.ProcessResponse>}
 */
const methodDescriptor_RPCService_ExecPlaylist = new grpc.web.MethodDescriptor(
  '/RPCService/ExecPlaylist',
  grpc.web.MethodType.UNARY,
  proto.DownloadRequest,
  proto.ProcessResponse,
  /**
   * @param {!proto.DownloadRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ProcessResponse.deserializeBinary
);


/**
 * @param {!proto.DownloadRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ProcessResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ProcessResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RPCServiceClient.prototype.execPlaylist =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/RPCService/ExecPlaylist',
      request,
      metadata || {},
      methodDescriptor_RPCService_ExecPlaylist,
      callback);
};


/**
 * @param {!proto.DownloadRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ProcessResponse>}
 *     Promise that resolves to the response
 */
proto.RPCServicePromiseClient.prototype.execPlaylist =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/RPCService/ExecPlaylist',
      request,
      metadata || {},
      methodDescriptor_RPCService_ExecPlaylist);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Args,
 *   !proto.DownloadProgress>}
 */
const methodDescriptor_RPCService_Progress = new grpc.web.MethodDescriptor(
  '/RPCService/Progress',
  grpc.web.MethodType.UNARY,
  proto.Args,
  proto.DownloadProgress,
  /**
   * @param {!proto.Args} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DownloadProgress.deserializeBinary
);


/**
 * @param {!proto.Args} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DownloadProgress)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DownloadProgress>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RPCServiceClient.prototype.progress =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/RPCService/Progress',
      request,
      metadata || {},
      methodDescriptor_RPCService_Progress,
      callback);
};


/**
 * @param {!proto.Args} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DownloadProgress>}
 *     Promise that resolves to the response
 */
proto.RPCServicePromiseClient.prototype.progress =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/RPCService/Progress',
      request,
      metadata || {},
      methodDescriptor_RPCService_Progress);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Args,
 *   !proto.DownloadFormats>}
 */
const methodDescriptor_RPCService_Formats = new grpc.web.MethodDescriptor(
  '/RPCService/Formats',
  grpc.web.MethodType.UNARY,
  proto.Args,
  proto.DownloadFormats,
  /**
   * @param {!proto.Args} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DownloadFormats.deserializeBinary
);


/**
 * @param {!proto.Args} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DownloadFormats)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DownloadFormats>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RPCServiceClient.prototype.formats =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/RPCService/Formats',
      request,
      metadata || {},
      methodDescriptor_RPCService_Formats,
      callback);
};


/**
 * @param {!proto.Args} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DownloadFormats>}
 *     Promise that resolves to the response
 */
proto.RPCServicePromiseClient.prototype.formats =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/RPCService/Formats',
      request,
      metadata || {},
      methodDescriptor_RPCService_Formats);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Empty,
 *   !proto.PendingList>}
 */
const methodDescriptor_RPCService_Pending = new grpc.web.MethodDescriptor(
  '/RPCService/Pending',
  grpc.web.MethodType.UNARY,
  proto.Empty,
  proto.PendingList,
  /**
   * @param {!proto.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.PendingList.deserializeBinary
);


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.PendingList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.PendingList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RPCServiceClient.prototype.pending =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/RPCService/Pending',
      request,
      metadata || {},
      methodDescriptor_RPCService_Pending,
      callback);
};


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.PendingList>}
 *     Promise that resolves to the response
 */
proto.RPCServicePromiseClient.prototype.pending =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/RPCService/Pending',
      request,
      metadata || {},
      methodDescriptor_RPCService_Pending);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Empty,
 *   !proto.RunningList>}
 */
const methodDescriptor_RPCService_Running = new grpc.web.MethodDescriptor(
  '/RPCService/Running',
  grpc.web.MethodType.UNARY,
  proto.Empty,
  proto.RunningList,
  /**
   * @param {!proto.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.RunningList.deserializeBinary
);


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.RunningList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.RunningList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RPCServiceClient.prototype.running =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/RPCService/Running',
      request,
      metadata || {},
      methodDescriptor_RPCService_Running,
      callback);
};


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.RunningList>}
 *     Promise that resolves to the response
 */
proto.RPCServicePromiseClient.prototype.running =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/RPCService/Running',
      request,
      metadata || {},
      methodDescriptor_RPCService_Running);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.KillRequest,
 *   !proto.ProcessResponse>}
 */
const methodDescriptor_RPCService_Kill = new grpc.web.MethodDescriptor(
  '/RPCService/Kill',
  grpc.web.MethodType.UNARY,
  proto.KillRequest,
  proto.ProcessResponse,
  /**
   * @param {!proto.KillRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ProcessResponse.deserializeBinary
);


/**
 * @param {!proto.KillRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ProcessResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ProcessResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RPCServiceClient.prototype.kill =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/RPCService/Kill',
      request,
      metadata || {},
      methodDescriptor_RPCService_Kill,
      callback);
};


/**
 * @param {!proto.KillRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ProcessResponse>}
 *     Promise that resolves to the response
 */
proto.RPCServicePromiseClient.prototype.kill =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/RPCService/Kill',
      request,
      metadata || {},
      methodDescriptor_RPCService_Kill);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Empty,
 *   !proto.ProcessResponse>}
 */
const methodDescriptor_RPCService_KillAll = new grpc.web.MethodDescriptor(
  '/RPCService/KillAll',
  grpc.web.MethodType.UNARY,
  proto.Empty,
  proto.ProcessResponse,
  /**
   * @param {!proto.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ProcessResponse.deserializeBinary
);


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ProcessResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ProcessResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RPCServiceClient.prototype.killAll =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/RPCService/KillAll',
      request,
      metadata || {},
      methodDescriptor_RPCService_KillAll,
      callback);
};


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ProcessResponse>}
 *     Promise that resolves to the response
 */
proto.RPCServicePromiseClient.prototype.killAll =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/RPCService/KillAll',
      request,
      metadata || {},
      methodDescriptor_RPCService_KillAll);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ClearRequest,
 *   !proto.ProcessResponse>}
 */
const methodDescriptor_RPCService_Clear = new grpc.web.MethodDescriptor(
  '/RPCService/Clear',
  grpc.web.MethodType.UNARY,
  proto.ClearRequest,
  proto.ProcessResponse,
  /**
   * @param {!proto.ClearRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ProcessResponse.deserializeBinary
);


/**
 * @param {!proto.ClearRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ProcessResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ProcessResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RPCServiceClient.prototype.clear =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/RPCService/Clear',
      request,
      metadata || {},
      methodDescriptor_RPCService_Clear,
      callback);
};


/**
 * @param {!proto.ClearRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ProcessResponse>}
 *     Promise that resolves to the response
 */
proto.RPCServicePromiseClient.prototype.clear =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/RPCService/Clear',
      request,
      metadata || {},
      methodDescriptor_RPCService_Clear);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Empty,
 *   !proto.FreeSpaceResponse>}
 */
const methodDescriptor_RPCService_FreeSpace = new grpc.web.MethodDescriptor(
  '/RPCService/FreeSpace',
  grpc.web.MethodType.UNARY,
  proto.Empty,
  proto.FreeSpaceResponse,
  /**
   * @param {!proto.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.FreeSpaceResponse.deserializeBinary
);


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.FreeSpaceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.FreeSpaceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RPCServiceClient.prototype.freeSpace =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/RPCService/FreeSpace',
      request,
      metadata || {},
      methodDescriptor_RPCService_FreeSpace,
      callback);
};


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.FreeSpaceResponse>}
 *     Promise that resolves to the response
 */
proto.RPCServicePromiseClient.prototype.freeSpace =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/RPCService/FreeSpace',
      request,
      metadata || {},
      methodDescriptor_RPCService_FreeSpace);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Empty,
 *   !proto.DirectoryTreeResponse>}
 */
const methodDescriptor_RPCService_DirectoryTree = new grpc.web.MethodDescriptor(
  '/RPCService/DirectoryTree',
  grpc.web.MethodType.UNARY,
  proto.Empty,
  proto.DirectoryTreeResponse,
  /**
   * @param {!proto.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DirectoryTreeResponse.deserializeBinary
);


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DirectoryTreeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DirectoryTreeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RPCServiceClient.prototype.directoryTree =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/RPCService/DirectoryTree',
      request,
      metadata || {},
      methodDescriptor_RPCService_DirectoryTree,
      callback);
};


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DirectoryTreeResponse>}
 *     Promise that resolves to the response
 */
proto.RPCServicePromiseClient.prototype.directoryTree =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/RPCService/DirectoryTree',
      request,
      metadata || {},
      methodDescriptor_RPCService_DirectoryTree);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Empty,
 *   !proto.UpdateResponse>}
 */
const methodDescriptor_RPCService_UpdateExecutable = new grpc.web.MethodDescriptor(
  '/RPCService/UpdateExecutable',
  grpc.web.MethodType.UNARY,
  proto.Empty,
  proto.UpdateResponse,
  /**
   * @param {!proto.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.UpdateResponse.deserializeBinary
);


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.UpdateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.UpdateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RPCServiceClient.prototype.updateExecutable =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/RPCService/UpdateExecutable',
      request,
      metadata || {},
      methodDescriptor_RPCService_UpdateExecutable,
      callback);
};


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.UpdateResponse>}
 *     Promise that resolves to the response
 */
proto.RPCServicePromiseClient.prototype.updateExecutable =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/RPCService/UpdateExecutable',
      request,
      metadata || {},
      methodDescriptor_RPCService_UpdateExecutable);
};


module.exports = proto;

